apply plugin: "com.android.library"

android {
    compileSdkVersion nusicCompileSdkVersion
    buildToolsVersion nusicBuildToolsVersion

    defaultConfig {
        minSdkVersion nusicMinSdkVersion
        targetSdkVersion nusictTargetSdkVersion
        versionCode nusicVersionCode
        versionName project.version
    }

    compileOptions {
        encoding nusicSourceEncoding
        sourceCompatibility nusicSourceCompatibility
        targetCompatibility nusicTargetCompatibility
    }

    // Use the standard java convention
    //sourceSets {
    //   androidTest.setRoot('src/test')
    //}
}

sonarqube {
    properties {
        def compileDependencies = project.configurations.compile.files.collect { it.path } join(",")
        /* SonarQube needs to be informed about your libraries and the android.jar to understand that methods like
         * onResume() is called by the Android framework. Without that information SonarQube will very likely create warnings
         * that those methods are never used and they should be removed. Same applies for libraries where parent classes
         * are required to understand how a class works and is used. */
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-${nusicCompileSdkVersion}/android.jar," +
                "build/intermediates/exploded-aar/**/*.jar,$compileDependencies"

        // See https://github.com/SonarSource/sonar-examples/blob/master/projects/languages/android/android-sonarqube-gradle/app/build.gradle
        // and https://room-15.github.io/blog/2016/01/21/Static-code-quality-measurements-with-SonarQube-Jacoco-and-UnitTests/
        property "sonar.sourceEncoding", nusicSourceEncoding
        property "sonar.sources", "src/main/java"
        // first defines where the java files are, the second where the xml files are
        property "sonar.exclusions", "build/**,**/*.png"
        property "sonar.import_unknown_files", true

        property "sonar.binaries", "build/intermediates/classes/release"
        property "sonar.libraries", libraries
        property "sonar.java.binaries", "build/intermediates/classes/release"
        property "sonar.java.libraries", libraries

        property "sonar.tests", "src/test/java"
        property "sonar.java.test.binaries", "build/intermediates/classes/release"
        property "sonar.java.test.libraries", libraries

        property "sonar.jacoco.reportPath", "build/jacoco/testReleaseUnitTest.exec"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/release"
        property "sonar.android.lint.report", "build/outputs/lint-results.xml"
    }
}

// TODO resource filtering: MD files, assets, constants
// TODO privacy Policy (wagon plugin?)
// TODO MD generation (MD plugin?)

dependencies {
    // Nusic modules
    compile(
            project(":nusic-data-api"),
            project(":nusic-core-api"),
            project(":nusic-util")
    )

    // External dependencies
    compile(
            "com.nostra13.universalimageloader:universal-image-loader:1.9.2",
            libraries.commonsIo,
            libraries.roboguice,
            libraries.slf4j,
            // An explicit log implementation is needed at compile time, because the log level is set by the app
            libraries.logback,
            libraries.androidDesign
    )
    // Enable annotation database to improve performance
    provided "org.roboguice:roboblender:3.0.1"

    // Test dependencies
    testCompile(
            libraries.junit,
            libraries.robolectric,
            libraries.robolectricAndroid
    )
}

project.tasks.withType(JavaCompile) { task ->
    logger.warn("Project name= ", project.name)
    /* This defines the class name of the annotation database, which is then generated by
     * roboblender annotation processor*/
    options.compilerArgs << "-AguiceAnnotationDatabasePackageName=${project.group}.annotation.nusicUiAndroid"
}
