<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>info.schnatterer.nusic</groupId>
		<artifactId>nusic-parent</artifactId>
		<version>1.0.2-SNAPSHOT</version>
	</parent>

	<artifactId>nusic-apk</artifactId>
	<packaging>apk</packaging>
	<name>nusic-apk</name>

	<properties>
		<abs.version>4.4.0</abs.version>
		<final.name>nusic-${project.version}</final.name>
		<sdk.version>21</sdk.version>
		<assets.dir.input>${project.basedir}/assets</assets.dir.input>
		<assets.dir.output>${project.build.directory}/filtered-assets</assets.dir.output>
		<res.dir.input>${project.basedir}/res</res.dir.input>
		<res.dir.output>${project.build.directory}/filtered-res</res.dir.output>
		<raw.mardkown.dir>${project.build.directory}/md-assets</raw.mardkown.dir>
	</properties>

	<profiles>
		<profile>
			<!-- Use Profiles to distinguish between the "implicit" builds of the 
				eclipse plugin and "explicit" builds triggered by calling mvn install -->
			<id>default</id>
			<activation>
				<property>
					<name>!m2e.version</name>
				</property>
			</activation>
			<dependencies>
				<!-- Before building make sure to copy the android JARs to your local 
					repo using the mave-android-sdk-deployer: https://github.com/mosabua/maven-android-sdk-deployer -->
				<dependency>
					<groupId>android</groupId>
					<artifactId>android</artifactId>
					<version>${android.sdk.version}</version>
					<scope>provided</scope>
				</dependency>
				<!-- Enable annotation database to improve performance. -->
				<dependency>
					<groupId>org.roboguice</groupId>
					<artifactId>roboblender</artifactId>
					<version>${roboguice.version}</version>
					<scope>provided</scope>
				</dependency>
				<!-- This dependency makes it impossible to deploy with eclipse... On 
					the other hand we can't run unit test without it from eclipse. -->
				<!-- TODO Find out which APIs are really needed and add only those? -->
				<dependency>
					<groupId>org.robolectric</groupId>
					<artifactId>android-all</artifactId>
					<version>${robolectric.android.version}</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.robolectric</groupId>
					<artifactId>robolectric</artifactId>
					<version>${robolectric.version}</version>
					<scope>test</scope>
				</dependency>
				<!--<dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> 
					<version>${mockito.version}</version> <scope>test</scope> </dependency> -->
			</dependencies>
		</profile>
	</profiles>

	<dependencies>
		<!-- Android dependecies -->
		<dependency>
			<groupId>android.support</groupId>
			<artifactId>compatibility-v4</artifactId>
			<version>21.0.1</version>
		</dependency>

		<dependency>
			<groupId>com.actionbarsherlock</groupId>
			<artifactId>actionbarsherlock</artifactId>
			<version>${abs.version}</version>
			<type>aar</type>
			<exclusions>
				<exclusion>
					<groupId>com.google.android</groupId>
					<artifactId>support-v4</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.roboguice</groupId>
			<artifactId>roboguice</artifactId>
			<version>${roboguice.version}</version>
		</dependency>

		<!-- Nusic dependencies -->
		<dependency>
			<groupId>com.nostra13.universalimageloader</groupId>
			<artifactId>universal-image-loader</artifactId>
			<version>1.9.2</version>
		</dependency>

		<!-- nusic sub modules -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>nusic-data-api</artifactId>
			<version>${project.parent.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>nusic-data-android</artifactId>
			<version>${project.parent.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>info.schnatterer.nusic</groupId>
			<artifactId>nusic-core-api</artifactId>
			<version>1.0.2-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>info.schnatterer.nusic</groupId>
			<artifactId>nusic-core-android</artifactId>
			<version>1.0.2-SNAPSHOT</version>
		</dependency>
		<!-- Test dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>${final.name}</finalName>

		<resources>
			<!-- Copy input assets to outptut assets dir -->
			<resource>
				<directory>${assets.dir.input}</directory>
				<filtering>false</filtering>
				<targetPath>${assets.dir.output}</targetPath>
			</resource>
			<!-- Include markdown sources to target in assets -->
			<resource>
				<directory>${project.basedir}/..</directory>
				<includes>
					<include>NOTICE.md</include>
					<include>CHANGELOG.md</include>
				</includes>
				<filtering>false</filtering>
				<targetPath>${raw.mardkown.dir}</targetPath>
			</resource>
			<!-- Filter specific files from res directory -->
			<resource>
				<directory>${res.dir.input}</directory>
				<filtering>true</filtering>
				<targetPath>${res.dir.output}</targetPath>
				<includes>
					<include>values/constants.xml</include>
				</includes>
			</resource>
			<!-- Copy all other files from res without filtering -->
			<resource>
				<directory>${res.dir.input}</directory>
				<filtering>false</filtering>
				<targetPath>${res.dir.output}</targetPath>
				<excludes>
					<exclude>values/constants.xml</exclude>
				</excludes>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<compilerArgument>-AguiceAnnotationDatabasePackageName=${project.groupId}.annotation.apk</compilerArgument>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jarsigner-plugin</artifactId>
				<version>1.2</version>
				<executions>
					<execution>
						<id>signing</id>
						<goals>
							<goal>sign</goal>
						</goals>
						<phase>package</phase>
						<inherited>true</inherited>
						<configuration>
							<includes>
								<include>${project.build.directory}/${project.artifactId}.apk</include>
							</includes>
							<keystore>${sign.keystore}</keystore>
							<alias>${sign.alias}</alias>
							<storepass>${sign.storepass}</storepass>
							<keypass>${sign.keypass}</keypass>
							<verbose>true</verbose>
							<arguments>
								<!-- Fix for JDK 1.7 -->
								<argument>-sigalg</argument>
								<argument>MD5withRSA</argument>
								<argument>-digestalg</argument>
								<argument>SHA1</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Download privacy policy file to assets -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>wagon-maven-plugin</artifactId>
				<version>1.0-beta-5</version>
				<executions>
					<execution>
						<id>update-privacy-policy</id>
						<phase>initialize</phase>
						<goals>
							<goal>download-single</goal>
						</goals>
						<configuration>
							<url>https://schnatterer.github.io/nusic/</url>
							<fromFile>privacyPolicy.html</fromFile>
							<!-- YES download it in input directory! This way we notice when something 
								changed! -->
							<toDir>${assets.dir.input}</toDir>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Bind maven resource filtering to initialize phase, see build/resources 
				for individual resources -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>resources</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Process Markdown to HTML -->
			<plugin>
				<groupId>com.ruleoftech</groupId>
				<artifactId>markdown-page-generator-plugin</artifactId>
				<version>0.6</version>
				<executions>
					<execution>
						<id>markdown2html</id>
						<phase>initialize</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<inputDirectory>${raw.mardkown.dir}</inputDirectory>
					<outputDirectory>${assets.dir.output}</outputDirectory>
				</configuration>
			</plugin>

			<!-- Starting with Android SDK Tools 23? you might have to copy zipaling 
				from sdk/build-tools/<version> to sdk/tools -->
			<plugin>
				<groupId>com.simpligility.maven.plugins</groupId>
				<artifactId>android-maven-plugin</artifactId>
				<version>4.1.0</version>
				<inherited>true</inherited>
				<extensions>true</extensions>
				<executions>
					<execution>
						<!-- Skip proguard in the default phase (process-classes)... -->
						<id>override-default</id>
						<configuration>
							<proguard>
								<skip>true</skip>
							</proguard>
						</configuration>
					</execution>
					<execution>
						<!-- But execute proguard after running the tests (prepare package) -->
						<id>progurad-after-test</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
						<configuration>
							<proguard>
								<skip>false</skip>
							</proguard>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<sdk>
						<!-- targetSdkVersion -->
						<platform>${sdk.version}</platform>
					</sdk>
					<manifest>
						<debuggable>false</debuggable>
					</manifest>
					<release>true</release>
					<sign>
						<debug>false</debug>
					</sign>
					<zipalign>
						<skip>false</skip>
						<verbose>true</verbose>
						<inputApk>${project.build.directory}/${final.name}.apk</inputApk>
						<outputApk>${project.build.directory}/${final.name}.apk</outputApk>
					</zipalign>
					<resourceDirectory>${res.dir.output}</resourceDirectory>
					<assetsDirectory>${assets.dir.output}</assetsDirectory>
					<!-- Non standard. Move to standard locaction? -->
					<androidManifestFile>AndroidManifest.xml</androidManifestFile>
					<assetsDirectory>assets</assetsDirectory>
					<resourceDirectory>res</resourceDirectory>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project> 