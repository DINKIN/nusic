apply plugin: "com.android.application"

android {
    compileSdkVersion nusicCompileSdkVersion
    buildToolsVersion nusicBuildToolsVersion

    defaultConfig {
        applicationId project.group
        minSdkVersion nusicMinSdkVersion
        targetSdkVersion nusictTargetSdkVersion
        versionCode nusicVersionCode
        versionName project.version
        // Set final name "nusic-x.y.z.apk" Some things were just easier with maven.
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                output.outputFile = new File(
                        output.outputFile.parent,
                        output.outputFile.name.replaceFirst(".*", "nusic-${project.version}.apk"))
            }
        }
    }

    compileOptions {
        encoding nusicSourceEncoding
        sourceCompatibility nusicSourceCompatibility
        targetCompatibility nusicTargetCompatibility
    }

    // Use the standard java convention
    //sourceSets {
    //        androidTest.setRoot('src/test')
    //}

    // see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.DexOptions.html#com.android.build.gradle.internal.dsl.DexOptions:preDexLibraries
    dexOptions {
        if (System.getProperty("dexOptionsMaxProcessCount") != null) {
            maxProcessCount = System.getProperty("dexOptionsMaxProcessCount").toInteger()
        }
        if (System.getProperty("dexOptionsJavaMaxHeapSize") != null) {
            javaMaxHeapSize = System.getProperty("dexOptionsJavaMaxHeapSize")
        }
        if (System.getProperty("dexOptionsPreDexLibraries") != null) {
            preDexLibraries = System.getProperty("dexOptionsPreDexLibraries").toBoolean()
        }
    }

    signingConfigs {
        release {
            storeFile file(signKeystore)
            storePassword signStorepasss
            keyAlias signAlias
            keyPassword signKeypass
        }
    }

    buildTypes {
        debug {
            // Also proguard debug build, or the 64K limit will be exceeded
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard.cfg"
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard.cfg"
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        // Both guava and roboguice contain this file. Avoid DuplicateFileException
        pickFirst "META-INF/maven/com.google.guava/guava/pom.properties"
        pickFirst "META-INF/maven/com.google.guava/guava/pom.xml"
    }
}

sonarqube {
    //noinspection GroovyAssignabilityCheck
    properties {
        def compileDependencies = project.configurations.compile.files.collect { it.path } join(",")
        /* SonarQube needs to be informed about your libraries and the android.jar to understand that methods like
         * onResume() is called by the Android framework. Without that information SonarQube will very likely create warnings
         * that those methods are never used and they should be removed. Same applies for libraries where parent classes
         * are required to understand how a class works and is used. */
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-${nusicCompileSdkVersion}/android.jar," +
                "build/intermediates/exploded-aar/**/*.jar,$compileDependencies"

        // See https://github.com/SonarSource/sonar-examples/blob/master/projects/languages/android/android-sonarqube-gradle/app/build.gradle
        // and https://room-15.github.io/blog/2016/01/21/Static-code-quality-measurements-with-SonarQube-Jacoco-and-UnitTests/

        property "sonar.sourceEncoding", nusicSourceEncoding
        property "sonar.sources", "src/main/java"
        // first defines where the java files are, the second where the xml files are
        property "sonar.exclusions", "build/**,**/*.png"
        property "sonar.import_unknown_files", true

        property "sonar.binaries", "build/intermediates/classes/release"
        property "sonar.java.binaries", "build/intermediates/classes/release"
        property "sonar.java.libraries", libraries

        // This project does not have test (yet?)
        //property "sonar.tests", "src/test/java"
        property "sonar.java.test.binaries", "build/intermediates/classes/release"
        property "sonar.java.test.libraries", libraries

        property "sonar.jacoco.reportPath", "build/jacoco/testReleaseUnitTest.exec"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/release"
        property "sonar.android.lint.report", "build/outputs/lint-results.xml"
    }
}

dependencies {
    // Nusic modules
    compile project(":nusic-ui-android"),
            project(":nusic-data-android"),
            project(":nusic-data-api"),
            project(":nusic-core-api"),
            project(":nusic-core-android")
    // { // This dependency is provided by android anyway, so spare the APK the bloat
    // TODO   exclude module: "commons-logging"
    //}

    // External dependencies
    compile libraries.roboguice,
            libraries.julToSlf4j,
            libraries.logback,
            libraries.androidSupportV4
}